log '''Load Jenkinsfile.default'''

node {
    //def _config = pipelineConfig()
    def _config = env._config
    
    //Remove left indent
    //- http://mrhaki.blogspot.kr/2010/06/groovy-goodness-strip-leading-spaces_20.html
    stage('*parepare') {
      echo """\
        Load Jenkinsfile.default
        |+ Loaded pipeline config
        |${_config}
        |+ Build scripted pipeline""".stripMargin()
    }
    
    // https://github.com/jenkinsci/script-security-plugin/blob/master/src/main/resources/org/jenkinsci/plugins/scriptsecurity/sandbox/whitelists/blacklist
    //println scm.properties
    
    _config = yaml.load(_config)
    
    //Check & Create slave containers
    //- https://github.com/jenkinsci/kubernetes-plugin
    //- https://stackoverflow.com/a/24189321
    if(_config.agent?.containers){
        def label = "jenkins-${UUID.randomUUID().toString()}"
        def _agent = _config.agent
        def _containers = []
        def _volumes = []
        
        // create container
        _agent.containers.each {
          _containers << containerTemplate(it)
        }
        
        // create volumes
        _agent.volumes?.each {
          it.each {
            //Loop of collection of map
            //- https://stackoverflow.com/a/43269874
            //Groovy dynamic method invokation
            //- http://www.groovy-lang.org/metaprogramming.html#_dynamic_method_names
            _volumes << "${it.key}"(it.value)
          }
        }
        
        echo _containers.join('\n')
        echo _volumes.join('\n')
        
        podTemplate(label: label, serviceAccount: 'jenkins-release', slaveConnectTimeout:30, containers: _containers, volumes: _volumes) {
          node(label) {
            stage('* init stage on slave container ') {
              echo "init!"
            }
            
            if(_config.build){
              def action = {
                container(it.key) {
                  stage("** BUILD: ${it.key}") {
                    sh "${it.value}"
                  }
                }
              }
              
              _config.build.each {
                it.each action
              }
            }
          } //node
        }
    }    
    
    //Build dynamic stages
    _config.stage.each {
      stage(it) {
        echo """\
        |**Load:
        |${_config[it]}
        |**Dump:
        |${yaml.dump([(it): _config[it]])}
        """.stripMargin()
      }
    }
}
